apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: compositions-panels-paginated
  namespace: demo-system
  annotations:
    "krateo.io/verbose": "true"
spec:
  api:
  - name: namespaces
    path: "/api/v1/namespaces"
    filter: "[.namespaces.items[] | .metadata.name]"
  - name: compositionspanelspaginated
    dependsOn: 
      name: namespaces
      iterator: .namespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/panels" }
    continueOnError: true
  filter: >
    {
      compositionspanelspaginated: (
        (if (.compositionspanelspaginated | type) == "array" then
          [.compositionspanelspaginated[]?.items[]? | select((.metadata.labels // {})["krateo.io/portal-page"] == "compositions")]
        elif (.compositionspanelspaginated | type) == "object" then
          [.compositionspanelspaginated.items[]?    | select((.metadata.labels // {})["krateo.io/portal-page"] == "compositions")]
        else
          []
        end) as $items
        | (._slice_.offset  // 0)                 as $offset
        | (._slice_.perPage // ($items | length)) as $perPage
        | [
            $items
            | length as $len
            | range($offset; $offset + $perPage)
            | select(. < $len)         # avoid out-of-bounds
            | $items[.]
          ]
      )
    }
---
apiVersion: widgets.templates.krateo.io/v1beta1
kind: DataGrid
metadata:
  name: compositions-page-datagrid-paginated
  namespace: demo-system
spec:
  apiRef:
    name: compositions-panels-paginated
    namespace: demo-system
  resourcesRefs:
    items: []                   
  resourcesRefsTemplate:
  - iterator: ${ .compositionspanelspaginated }
    template:
      apiVersion: ${ .apiVersion }
      id: ${ .metadata.name }
      name: ${ .metadata.name }
      namespace: ${ .metadata.namespace }
      resource: panels
      verb: GET
  widgetData:
    asGrid: true
    grid:
      column: 1
    items: []
    prefix: compositions-datagrid-filters
    allowedResources: []
  widgetDataTemplate:
  - expression: |
      ${ [ .compositionspanelspaginated[] | { resourceRefId: .metadata.name} ] }
    forPath: items
---
kind: Page
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: compositions-page-datagrid-paginated
  namespace: demo-system
spec:
  widgetData:
    allowedResources: []
    items:
      - resourceRefId: compositions-page-datagrid-paginated
  resourcesRefs:
    items:
      - id: compositions-page-datagrid-paginated
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: compositions-page-datagrid-paginated
        namespace: demo-system
        resource: datagrids
        verb: GET
---
kind: NavMenuItem
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: pagination-menu-item-paginated
  namespace: demo-system
spec:
  widgetData:
    resourceRefId: compositions-page-datagrid-paginated
    label: Paginated datagrid
    icon: fa-rectangle-list
    path: /datagrid-paginated
    order: 90
    allowedResources: []

  resourcesRefs:
    items:
      - id: compositions-page-datagrid-paginated
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: compositions-page-datagrid-paginated
        namespace: demo-system
        resource: pages
        verb: GET
---