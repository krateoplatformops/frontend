name: release-pullrequest

on:
  pull_request:
    branches:
      - main

env:
  GHCR_REPO: ghcr.io/${{ github.repository }}

jobs:
  build:
    name: Build and NOT Push
    strategy:
      matrix:
        runner: [buildjet-2vcpu-ubuntu-2204-arm, buildjet-2vcpu-ubuntu-2204]
        include:
          - runner: buildjet-2vcpu-ubuntu-2204-arm
            platform: linux/arm64
          - runner: buildjet-2vcpu-ubuntu-2204
            platform: linux/amd64
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REPO }}

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and NOT push
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          push: false
          labels: ${{ steps.meta.outputs.labels }}

  crds:
    name: Generate crds
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Set up Helm
        uses: azure/setup-helm@v4.1.0

      - name: Generate KinD config with hostPort
        run: |
          cat <<EOF > kind-config.yaml
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          nodes:
            - role: control-plane
              extraPortMappings:
                - containerPort: 30082   # Port inside container
                  hostPort: 30082        # Port accessible on runner
                - containerPort: 30088   # Port inside container
                  hostPort: 30088        # Port accessible on runner
                  protocol: TCP
          EOF

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:v1.33.1
          config: kind-config.yaml

      - name: Generate and apply JWT signing secret
        run: |
          JWT_SIGN_KEY=$(openssl rand -base64 32)
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          metadata:
            name: jwt-sign-key
          type: Opaque
          stringData:
            JWT_SIGN_KEY: ${JWT_SIGN_KEY}
          EOF

      - name: Add Krateo Helm repository
        run: helm repo add krateo https://charts.krateo.io

      - name: Update Krateo Helm repository
        run: helm repo update krateo

      - name: Install Krateo PlatformOps authn
        run: helm install authn krateo/authn --version=0.20.1 --wait --set service.type=NodePort  --set service.nodePort=30082

      - name: Install Krateo PlatformOps authn
        run: helm install smithery krateo/smithery --version=0.6.0 --wait --set service.type=NodePort  --set service.nodePort=30088

      - name: Generate random password
        id: genpass
        run: echo "password=$(openssl rand -base64 12)" >> $GITHUB_OUTPUT

      - name: Apply admin Secret and User
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: v1
          kind: Secret
          type: kubernetes.io/basic-auth
          metadata:
            name: admin-password
            namespace: default
          stringData:
            password: "${{ steps.genpass.outputs.password }}"
          ---
          apiVersion: basic.authn.krateo.io/v1alpha1
          kind: User
          metadata:
            name: admin
            namespace: default
          spec:
            displayName: Admin
            avatarURL: https://i.pravatar.cc/256?img=69
            groups:
              - admins
            passwordRef:
              namespace: default
              name: admin-password
              key: password
          EOF

      - name: Apply ClusterRoleBinding
        run: |
          cat <<EOF | kubectl apply -f -
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: cluster-admin-binding
          subjects:
          - kind: Group
            name: admins
            apiGroup: rbac.authorization.k8s.io
          roleRef:
            kind: ClusterRole
            name: cluster-admin
            apiGroup: rbac.authorization.k8s.io
          EOF

      - name: Checkout
        uses: actions/checkout@v3

      - name: Override /public/config/config.json
        run: |
          cat <<EOF > $GITHUB_WORKSPACE/public/config/config.json
          {
            "api": {
              "AUTHN_API_BASE_URL": "http://127.0.0.1:30082",
              "BACKEND_API_BASE_URL": "http://127.0.0.1:30081",
              "EVENTS_API_BASE_URL": "http://127.0.0.1:30083",
              "EVENTS_PUSH_API_BASE_URL": "http://127.0.0.1:30083",
              "SMITHERY_API_BASE_URL": "http://127.0.0.1:30088",
              "INIT": "/call?resource=navmenus&apiVersion=widgets.templates.krateo.io/v1beta1&name=sidebar-nav-menu&namespace=krateo-system",
              "TERMINAL_SOCKET_URL": "http://localhost:8084"
            },
            "params": {
              "FRONTEND_NAMESPACE": "krateo-system",
              "DELAY_SAVE_NOTIFICATION": "10000"
            }
          }
          EOF

      - name: Install tsx
        run: npm install tsx

      - name: Get access token
        env:
          ADMIN_USERNAME: admin
          ADMIN_PASSWORD: ${{ steps.genpass.outputs.password }}
        run: |
          cd $GITHUB_WORKSPACE
          npm run get-access-token

      - name: Send schemas
        run: |
          cd $GITHUB_WORKSPACE
          npm run send-schemas

      - name: List files in /scripts/smithery-output
        run: |
          cd $GITHUB_WORKSPACE
          ls -la ./scripts/smithery-output

      - name: Upload .yaml files from /scripts/smithery-output
        uses: actions/upload-artifact@v4
        with:
          name: smithery-yaml-files
          path: ${{ github.workspace }}/scripts/smithery-output/*.yaml

      - name: Authenticate with GitHub App
        id: authenticate
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.PRIVATE_KEY }}

      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Push .yaml files to krateoplatformops/frontend-chart via PR
        env:
          GH_TOKEN: ${{ steps.authenticate.outputs.token }}
        run: |
          REF_NAME="${GITHUB_REF_NAME}"
          BRANCH="smithery-${REF_NAME}"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Authenticate GitHub CLI
          gh auth login --with-token <<< "$GH_TOKEN"

          # Clone the target repo
          gh repo clone krateoplatformops/frontend-chart
          cd frontend-chart

          # Create a new branch
          git checkout -b "$BRANCH"

          # Copy files to /chart/crds
          mkdir -p chart/crds
          cp "$GITHUB_WORKSPACE/scripts/smithery-output/"*.yaml chart/crds/ || true

          # Check for changes and push
          if ! git diff --quiet -- chart/crds; then
            git add chart/crds
            git commit -m "Add Smithery output YAMLs from ${REF_NAME}"
            git push --set-upstream origin "$BRANCH"

            gh pr create \
              --title  "Add Smithery output YAMLs (${REF_NAME})" \
              --body   "Automated PR generated by workflow run $GITHUB_RUN_ID." \
              --head   "$BRANCH" \
              --base   main
          else
            echo "No YAML changes to commit â€” skipping PR."
          fi