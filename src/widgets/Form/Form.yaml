kind: Panel
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: firework-form-panel
  namespace: krateo-system
spec:
  widgetData:
    allowedResources:
      - barcharts
        buttons
        columns
        datagrids
        eventlists
        filters
        flowcharts
        forms
        linecharts
        markdowns
        pages
        panels
        paragraphs
        piecharts
        restactions
        rows
        tables
        tablists
        yamlviewers
    actions: {}
    title: Firework App Form
    items:
      - resourceRefId: firework-form
  resourcesRefs:
    items:
      - id: firework-form
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: firework-form
        namespace: krateo-system
        resource: forms
        verb: GET
---
kind: Form
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: firework-form
  namespace: krateo-system
spec:
  widgetData:
    allowedResources:
      - barcharts
        buttons
        columns
        datagrids
        eventlists
        filters
        flowcharts
        forms
        linecharts
        markdowns
        pages
        panels
        paragraphs
        piecharts
        restactions
        rows
        tables
        tablists
        yamlviewers
    schema: {}
    submitActionId: firework-submit-action
    actions:
      rest:
        - id: firework-submit-action
          resourceRefId: resource-ref-1
          type: rest
          onSuccessNavigateTo: /compositions/${metadata.namespace}/${metadata.name}
          payloadToOverride:
          - name: metadata.name
            value: ${ git.toRepo.name }
  widgetDataTemplate:
    - forPath: schema
      expression: ${ .getSchema | .spec.versions[] | select(.name == "v2-0-0") | .schema.openAPIV3Schema.properties.spec }
  resourcesRefs:
    items:
      - id: resource-ref-1
        apiVersion: composition.krateo.io/v2-0-0
        name: new-app
        namespace: fireworksapp-system
        resource: fireworksapps
        verb: POST
  apiRef:
    name: firework-schema
    namespace: krateo-system
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: firework-schema
  namespace: krateo-system
spec:
  api:
  - name: getSchema
    verb: GET
    path: "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/fireworksapps.composition.krateo.io"
    headers:
    - 'Accept: application/json'
---
kind: Form
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: test-firework-form
  namespace: krateo-system
spec:
  widgetData:
    allowedResources:
      - barcharts
        buttons
        columns
        datagrids
        eventlists
        filters
        flowcharts
        forms
        linecharts
        markdowns
        pages
        panels
        paragraphs
        piecharts
        restactions
        rows
        tables
        tablists
        yamlviewers
    buttonConfig:
      primary: 
        label: Custom submit
        icon: fa-rocket
      secondary:
        label: Go back
    submitActionId: firework-submit-action
    # stringSchema: |
    #   {
    #     "type": "object",
    #     "properties": {
    #       "loremipsum2": {
    #         "type": "string",
    #         "title": "Lorem ipsum2",
    #         "description": "bla bla bla"
    #       },
    #       "loremipsum3": {
    #         "type": "string",
    #         "title": "Lorem ipsum3",
    #         "description": "bla bla bla"
    #       },
    #       "name": {
    #         "type": "string",
    #         "title": "Application Name",
    #         "description": "The name of your fireworks app"
    #       },
    #       "loremipsum": {
    #         "type": "string",
    #         "title": "Lorem ipsum",
    #         "description": "bla bla bla"
    #       },
    #       "image": {
    #         "type": "string",
    #         "title": "Container Image",
    #         "description": "Full image path (e.g., ghcr.io/org/image:tag)"
    #       },
    #       "replicas": {
    #         "type": "integer",
    #         "title": "Number of Replicas",
    #         "default": 1
    #       },
    #       "users": {
    #         "type": "array",
    #         "title": "Users",
    #         "description": "List of users for the application",
    #         "items": {
    #           "type": "object",
    #           "properties": {
    #             "fullname": {
    #               "type": "string",
    #               "title": "Full Name"
    #             },
    #             "role": {
    #               "type": "string",
    #               "title": "Role",
    #               "enum": ["admin", "user", "viewer"]
    #             }
    #           },
    #           "required": ["fullname", "role"]
    #         }
    #       },
    #       "select1": {
    #         "type": "string",
    #         "title": "regione",
    #         "description": "The list of regions",
    #         "enum": [
    #           "Piemonte",
    #           "Lombardia",
    #           "Veneto",
    #           "Emilia-Romagna",
    #           "Toscana",
    #           "Liguria"
    #         ]
    #       },
    #       "select2": {
    #         "type": "string",
    #         "title": "provincia",
    #         "description": "The list of provinces",
    #         "enum": []
    #       },
    #       "select3": {
    #         "type": "string",
    #         "title": "comune",
    #         "description": "The list of cities",
    #         "enum": []
    #       },
    #       "enableMetrics": {
    #         "type": "boolean",
    #         "title": "Enable Metrics",
    #         "default": false
    #       },
    #       "test": {
    #         "type": "object",
    #         "properties": {
    #           "property1": {
    #             "type": "string"
    #           },
    #           "property2": {
    #             "type": "string"
    #           }
    #         },
    #         "required": ["property2"]
    #       }
    #     },
    #     "required": ["name", "image", "enableMetrics"]
    #   }
    stringSchema: |
      {
        "properties": {
          "metadata": {
            "properties": {
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string",
                "default": "{{ .Release.Namespace }}"
              },
              "test check": {
                "type": "boolean"
              }
            },
            "type": "object",
            "required": [
              "name"
            ]
          },
          "rules": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "roleRef": {
                  "type": "object",
                  "required": ["apiGroup", "kind", "name"],
                  "properties": {
                    "apiGroup": {
                      "type": "string",
                      "enum": ["rbac.authorization.k8s.io"]
                    },
                    "kind": {
                      "type": "string",
                      "enum": ["Role", "ClusterRole"]
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                },
                "subjects": {
                  "type": "object",
                  "required": ["kind", "name"],
                  "properties": {
                    "kind": {
                      "type": "string",
                      "enum": ["User", "Group", "ServiceAccount"]
                    },
                    "name": {
                      "type": "string",
                      "minLength": 1
                    },
                    "namespace": {
                      "type": "string",
                      "minLength": 1
                    }
                  }
                },
                "required": ["roleRef", "subjects"]
              }
            }
          }
        },
        "required": [
          "metadata",
          "rules"
        ],
        "type": "object"
      }
    autocomplete:
      - path: name
        fetch:
          url: https://loremipsum.io/api/1
          verb: GET
    # objectFields:
    #   - path: users
    #     displayField: fullname
    objectFields:
      - path: rules
        displayField: subjects.name
    dependencies:
      - path: select2
        dependsField: 
          field: select1
        fetch:
          url: https://mocki.io/v1/64b17021-c9bd-45c6-bc79-f5bd126add5c/${select1}
          verb: GET
      - path: select3
        dependsField: 
          field: select2
        fetch:
          url: https://mocki.io/v1/64b17021-c9bd-45c6-bc79-f5bd126add5c
          verb: GET
    actions:
      rest:
        - id: firework-submit-action
          resourceRefId: resource-ref-1
          type: rest
          payloadKey: spec
          onSuccessNavigateTo: /compositions/${metadata.namespace}/${metadata.name}
          payloadToOverride:
            - name: metadata.name
              value: ${ git.toRepo.name }
          loading:
            display: true
  resourcesRefs:
    items:
      - id: resource-ref-1
        apiVersion: composition.krateo.io/v2-0-0
        name: new-app
        namespace: fireworksapp-system
        resource: fireworksapps
        verb: POST
