
kind: RoutesLoader
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: routes-loader
  namespace: krateo-system
spec:
  widgetData: {}
  resourcesRefs:
    items: []
  resourcesRefsTemplate:
    - iterator: ${ .routes }
      template:
        id: ${ .metadata.namespace + "_" + .metadata.name }
        name: ${ .metadata.name }
        apiVersion: ${ .apiVersion }
        resource: routes
        namespace: ${ .metadata.namespace }
        verb: GET
  apiRef:
    name: all-routes
    namespace: krateo-system
---
apiVersion: templates.krateo.io/v1
kind: RESTAction
metadata:
  name: all-routes
  namespace: krateo-system
spec:
  api:
  - name: namespaces
    path: "/api/v1/namespaces"
    filter: "[.namespaces.items[] | .metadata.name]"
  - name: routes
    continueOnError: true
    dependsOn: 
      name: namespaces
      iterator: .namespaces
    path: ${ "/apis/widgets.templates.krateo.io/v1beta1/namespaces/" + (.) + "/routes" }
  filter: >
    {
      routes: (
        if (.routes | type) == "array" then
          [.routes[]?.items[]?]
        elif (.routes | type) == "object" then
          [.routes.items[]?]
        else
          []
        end
      )
    }
