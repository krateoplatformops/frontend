# Case 1: Empty items array
# Target: simulate a column configuration that defines no child widgets.
# Expected behavior: renders an empty column with no content, leaving the area visually blank. 
# This helps validate that the layout system gracefully handles intentionally empty structures.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-empty
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items: []
    size: 12
  resourcesRefs:
    items: []
---
# Case 2: Missing resource resolution
# Target: simulate a situation where an item references a child widget that cannot be resolved 
# because the corresponding resourceRefId is not listed in resourcesRefs.
# Expected behavior: skips rendering that specific child (returns null), 
# but continues rendering other valid items if present.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-missing-ref
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items:
      - resourceRefId: button-nonexistent
    size: 8
  resourcesRefs:
    items: []
---
# Case 3: Zero-sized column
# Target: simulate a column with size=0.
# Expected behavior: column is effectively hidden (occupies no visible horizontal space), 
# ensuring layout calculations remain consistent in multi-column grids.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-zero-size
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items:
      - resourceRefId: example-table-basic
    size: 0
  resourcesRefs:
    items:
      - id: example-table-basic
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-table-basic
        namespace: krateo-system
        resource: tables
        verb: GET
---
# Case 4: Single child
# Target: validate that a simple column with one valid child widget renders correctly.
# Expected behavior: displays one resource inside a vertically stacked layout space.
# This case confirms that a single resolved child is passed through the WidgetRenderer without issues.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-single-child
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items:
      - resourceRefId: example-table-basic
    size: 12
  resourcesRefs:
    items:
      - id: example-table-basic
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-table-basic
        namespace: krateo-system
        resource: tables
        verb: GET
---
# Case 5: Single child full screen
# Target: validate that a simple column with one valid child widget renders correctly and occupies all available space.
# Expected behavior: displays one resource inside a vertically stacked layout space full screen.
# This case confirms that a single resolved child is passed through the WidgetRenderer without issues.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-single-child-full-screen
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items:
      - resourceRefId: example-table-basic
  resourcesRefs:
    items:
      - id: example-table-basic
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-table-basic
        namespace: krateo-system
        resource: tables
        verb: GET
---
# Case 6: Mixed valid and invalid children
# Target: simulate a partially broken layout where one of the referenced widgets cannot be resolved.
# Expected behavior: valid child widgets are rendered normally, 
# while unresolved references are silently ignored without breaking layout continuity.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-mixed
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items:
      - resourceRefId: non-existent-widget
      - resourceRefId: example-table-basic
    size: 16
  resourcesRefs:
    items:
      - id: example-table-basic
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-table-basic
        namespace: krateo-system
        resource: tables
        verb: GET
---
# Case 7: Multiple child widgets
# Target: confirm that multiple widgets can be rendered inside the same column, 
# preserving vertical stacking and consistent spacing.
# Expected behavior: both child widgets appear in order, each occupying its logical vertical slot 
# within the column.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-multiple-child
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [barcharts, buttons, columns, datagrids, eventlists, filters, flowcharts, forms, linecharts, markdowns, panels, paragraphs, piecharts, rows, tables, tablists, yamlviewers]
    items:
      - resourceRefId: example-linechart-multi
      - resourceRefId: example-table-basic
    size: 12
  resourcesRefs:
    items:
      - id: example-linechart-multi
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-linechart-multi
        namespace: krateo-system
        resource: linecharts
        verb: GET
      - id: example-table-basic
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-table-basic
        namespace: krateo-system
        resource: tables
        verb: GET
---
# Case 8: Nested column (layout composition)
# Target: demonstrate that a column can include another column, 
# confirming the recursive nature of layout widgets.
# Expected behavior: outer column renders correctly and the nested column is properly 
# delegated to WidgetRenderer, producing a consistent layout hierarchy.
kind: Column
apiVersion: widgets.templates.krateo.io/v1beta1
metadata:
  name: example-column-nested
  namespace: krateo-system
spec:
  widgetData:
    allowedResources: [columns, buttons, rows, paragraphs, tables]
    items:
      - resourceRefId: example-table-basic
      - resourceRefId: example-column-multiple-child
    size: 12
  resourcesRefs:
    items:
      - id: example-table-basic
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-table-basic
        namespace: krateo-system
        resource: tables
        verb: GET
      - id: example-column-multiple-child
        apiVersion: widgets.templates.krateo.io/v1beta1
        name: example-column-multiple-child
        namespace: krateo-system
        resource: columns
        verb: GET